#include <Wire.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>

// #include "imu_data.pb.h"  // Generated by nanopb OLD
#include "img_imu_data.pb.h" // Generated by nonopb

#include <pb_encode.h>    // Nanopb encoder
#include <pb.h>           // Core Nanopb type

Adafruit_MPU6050 mpu;

int cameraTriggerCounter = 0;

void setup() {
  Serial.begin(115200);
  while (!Serial);

  if (!mpu.begin()) {
    //Serial.println("Failed to find MPU6050 chip");
    while (1) delay(10);
  }

  mpu.setAccelerometerRange(MPU6050_RANGE_8_G);
  mpu.setGyroRange(MPU6050_RANGE_500_DEG);
  mpu.setFilterBandwidth(MPU6050_BAND_184_HZ);



  delay(100);
}

void loop() {
  //Serial.println("Start loop");

  // if(cameraTriggerCounter == 20){
  Camera_event();
  //   cameraTriggerCounter == -1;
  // }

  IMU_event();

  //++cameraTriggerCounter;
  
  delay(5);
}

void Camera_event(){
  unsigned long time = micros();

  float timeInSeconds = (float)time / 1000000.0;
  
  ImgData data = ImgData_init_zero;

  data.camera_timestamp = timeInSeconds;
  
  uint8_t buffer[128];

  // Create message of size buffer
  pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));


  // Compress the binary data into the buffer
  if (pb_encode(&stream, ImgData_fields, &data)) {
    uint32_t len = stream.bytes_written;
    uint8_t marker[] = {0xAA, 0x54}; // start bytes
    Serial.write(marker, 2);         // sends the start bytes
    Serial.write((uint8_t*)&len, 4); // sends the length of the message
    Serial.write(buffer, len);       // sends the endocded binary message
    Serial.flush();
  } else{
    Serial.println("Camera encode failed!");
    Serial.flush();
  }
  
}

void IMU_event(){
  sensors_event_t a, g, temp;
  mpu.getEvent(&a, &g, &temp);

  // Create instance of generated struct
  ImuData data = ImuData_init_zero;

  // Place acceleration IMU data in the struct
  data.acc_x = a.acceleration.x;
  data.acc_y = a.acceleration.y;
  data.acc_z = a.acceleration.z;

  // Place angular velocity IMU data in the struct
  data.ang_x = g.gyro.x;
  data.ang_y = g.gyro.y;
  data.ang_z = g.gyro.z;

  unsigned long time = micros();
  float timeInSeconds = (float)time / 1000000.0;

  data.imu_timestamp = timeInSeconds;

  // Buffer for the message
  uint8_t buffer[128];

  // Create message of size buffer
  pb_ostream_t stream = pb_ostream_from_buffer(buffer, sizeof(buffer));

  // Compress the binary data into the buffer
  if (pb_encode(&stream, ImuData_fields, &data)) {
    uint32_t len = stream.bytes_written;
    uint8_t marker[] = {0xAA, 0x55}; // start bytes
    Serial.write(marker, 2);         // sends the start bytes
    Serial.write((uint8_t*)&len, 4); // sends the length of the message
    Serial.write(buffer, len);       // sends the endocded binary message
    Serial.flush();
  } else{
    Serial.println("IMU encode failed!");
    Serial.flush();
  }
}

